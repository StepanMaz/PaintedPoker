@using Dumpify
@using PaintedPoker.Components.Game.Dialogs
@using PaintedPoker.Entities
@using PaintedPoker.Game
@using PaintedPoker.Utils
@using PaintedPokerLib.Game

@inject IDialogService DialogService

@code {
    [Parameter]
    public required ICollection<Player> Players { get; set; }

    [Parameter]
    public required ICollection<RoundDef> Rounds { get; set; }

    [Parameter]
    public Action? OnChange { get; set; }

    public PlayerCollection<int> GetPlayersScores()
    {
        var scores = new PlayerCollection<int>();

        foreach (var player in Players)
        {
            scores[player] = 0;
            foreach (var round in Rounds)
            {
                RoundResult result;
                var hasRes = round.Results.TryGetValue(player, out result);
                if (hasRes && result is not null) scores[player] += result.GetPoints() ?? 0;
            }
        }

        return scores;
    }

    async void RenamePlayer(Player player)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TextInput> { { ti => ti.BaseText, player.Name } };
        var dialog = await DialogService.ShowAsync<TextInput>("Change name", parameters, options);
        var res = await dialog.Result;

        if (res is not null && !res.Canceled)
        {
            var newName = (string)res.Data!;

            player.Name = newName;
        }

        HandleChanges();
    }

    public void HandleChanges()
    {
        OnChange?.Invoke();
        StateHasChanged();
    }

    public Action<RoundResult?> EditRes(RoundDef round, Player player)
    {
        return (res) =>
        {
            round.Results[player] = res;
            HandleChanges();
        };
    }

    private (int? wins, int? stakes) GetResultsStats(IEnumerable<RoundResult> results)
    {
        int? totalWins = null, totalStakes = null;
        foreach (var (_stakes, _wins) in results.Select(x => x.Normalize()))
        {
            if (_wins is not null)
                totalWins = (totalWins ?? 0) + _wins.Value;

            if (_stakes is not null)
                totalStakes = (totalStakes ?? 0) + _stakes.Value;
        }
        return (totalWins, totalStakes);
    }

    public Color GetStatsColor(int? wins, int? stakes, RoundDef round)
    {
        if (stakes is null) return Color.Default;
        if (wins is not null && wins == round.Round.CardCount && round.Results.Values.All(x => x is not null && x is not
        PartialResult)) return Color.Success;
        return Color.Error;
    }
}

<div>
    <MudTable Items="Rounds" FixedFooter=true FixedHeader=true Height="90vh" Class="my-5">
        <HeaderContent>
            <MudTh>
                Round
            </MudTh>
            @foreach (var player in Players)
            {
                <MudTh>
                    <MudButton @onclick="() => RenamePlayer(player)">
                        @player.Name
                    </MudButton>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                @context.Round.Accept(RoundFormatter.Instance)

                @{
                    var stats = GetResultsStats(context.Results.Values);
                }
                <MudChip T="string" Class="mx-4" Color="GetStatsColor(stats.wins, stats.stakes, context)">
                    @(stats.wins?.ToString() ?? "-") / @(stats.stakes?.ToString() ?? "-")
                </MudChip>

                <PlayRound OnChange=HandleChanges Round=@context Players=Players />
            </MudTd>
            @foreach (var player in Players)
            {
                <MudTd>
                    @{
                        RoundResult result;
                        var hasResult = @context.Results.TryGetValue(player, out result);
                    }

                    <Cell Result=@result Round=@context.Round OnChange="EditRes(context, player)" />

                    @if (result.GetPoints() is int points)
                    {
                        <MudChip T="string" Variant="Variant.Filled" Color="@(points < 0 ? Color.Error : Color.Success)">
                            @points
                        </MudChip>
                    }
                </MudTd>
            }
        </RowTemplate>
        <FooterContent>
            <MudTd>Scores:</MudTd>
            @foreach (var (_, score) in GetPlayersScores())
            {
                <MudTd>
                    <MudChip T="string" Variant="Variant.Filled" Color="@(score < 0 ? Color.Error : Color.Success)">
                        @score
                    </MudChip>
                </MudTd>
            }
        </FooterContent>
    </MudTable>
</div>
