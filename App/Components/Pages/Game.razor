@using Dumpify
@using PaintedPoker.Components.Game
@using PaintedPoker.Entities
@using PaintedPoker.Services
@using PaintedPokerLib.Game

@attribute [Route(Nav.Games + "/{name}")]
@rendermode InteractiveServer
@inject IGameService gameService
@inject IGameCache gameCache

@implements IDisposable

@code {
    [Parameter]
    public required string Name { get; set; }

    GameData? GameData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GameData = await gameCache.Get(Name) ?? await gameService.GetGameByName(Name);

        if (GameData is not null)
        {
            await gameCache.Set(GameData);
            GameData.OnChange += HandleChanges;
        }
    }

    public void Dispose()
    {
        if (GameData is null) return;
        GameData.OnChange -= HandleChanges;
    }

    public async Task HandleChanges(GameData gameData)
    {
        GameData = gameData;
        await InvokeAsync(StateHasChanged);
    }
}

@if (GameData is not null)
{
    <p>Game: @Name</p>
    <Table Players=GameData.Players Rounds=GameData.Rounds OnChange="() => GameData.NotifySelf()"/>
}
else
{
    <p>Game does not exist</p>
}