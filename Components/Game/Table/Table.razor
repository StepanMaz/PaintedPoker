@using PaintedPoker.Components.Game.Dialogs
@using PaintedPoker.Game.Rules;
@using PaintedPoker.Game.Table;
@inject ISnackbar Snakbar;
@inject IDialogService DialogService;
@inject ILogger<Table> _logger;
@rendermode InteractiveServer

<MudTable Items="GameTable.Rows">
    <HeaderContent>
        <MudTh>Round</MudTh>
        @foreach (var header in GameTable.Headers)
        {
            <MudTh>
                <MudButton OnClick="() => RenamePlayer(header)">@header.DisplayName</MudButton>
            </MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudText style="text-transform: capitalize;" Cas>Name: @context.Header.DisplayName</MudText>
        </MudTd>

        @for (int col = 0; col < GameTable.ColumnCount; col++)
        {
            var _col = col;
            <MudTd>
                <MudButton OnClick="() => HandleCellClick(context[_col])">
                    @context[_col].GameResult.Accept(new StringFormatterVisitor())
                </MudButton>
            </MudTd>
        }
    </RowTemplate>
    <FooterContent>
        <MudTd>
            Results
        </MudTd>
        @for (int col = 0; col < GameTable.ColumnCount; col++)
        {
            var _col = col;
            <MudTd>
                Points: @GameTable.Rows.Sum(x => Calculator.Calculate(x[_col].GameResult))
            </MudTd>
        }
    </FooterContent>
</MudTable>

@code {
    [Parameter]
    public required GameTable<CellMetadata, HeaderMetadata, HeaderMetadata> GameTable { get; set; }

    [Parameter]
    public Action? TableDataChanged { get; set; } = null;

    public IPointsCalculator Calculator = new DefaultPointsCalculator();

    public async void RenamePlayer(HeaderMetadata header)
    {
        var new_name = await PromptStringInput("Enter new player name");
        if (new_name is null || new_name == header.DisplayName) return;
        
        header.DisplayName = new_name;
        
        TableDataChanged?.Invoke();
        StateHasChanged();
    }

    public async Task<string?> PromptStringInput(string title)
    {
        var res = await DialogService.Show<TextInput>(title).Result;

        if (res is null || res.Data is null) return null;

        return (string)res.Data;
    }

    public async void HandleCellClick(CellMetadata result)
    {

        var new_cell_value = await result.GameResult.Accept(new CellClickActions(DialogService, Snakbar));

        if (new_cell_value == result.GameResult) return;

        result.GameResult = new_cell_value;

        TableDataChanged?.Invoke();
        StateHasChanged();
    }

    private class CellClickActions(IDialogService dialogService, ISnackbar snackbar) : IGameResultVisitor<Task<IGameResult>>
    {
        public Task<IGameResult> Visit(DefaultResult result)
        {
            snackbar.Add("Cell is already configured", Severity.Info);
            return Task.FromResult(result as IGameResult);
        }

        public async Task<IGameResult> Visit(DefaultResult.Partial result)
        {
            var res = await dialogService.Show<NumberInput>("Enter wins").Result;

            if (res is null || res.Data is null) return result;

            int wins = (int)res.Data;

            return new DefaultResult(result.Stakes, new Wins(wins));
        }

        public async Task<IGameResult> Visit(DefaultResult.Empty result)
        {
            var res = await dialogService.Show<NumberInput>("Enter stakes").Result;

            if (res is null || res.Data is null) return result;

            int stake = (int)res.Data;

            return new DefaultResult.Partial(new Stakes(stake));
        }

        public Task<IGameResult> Visit(WinsOnlyRoundResult result)
        {
            snackbar.Add("Cell is already configured", Severity.Info);
            return Task.FromResult(result as IGameResult);
        }

        public async Task<IGameResult> Visit(WinsOnlyRoundResult.Empty result)
        {
            var res = await dialogService.Show<NumberInput>("Enter wins").Result;

            if (res is null || res.Data is null) return result;

            int wins = (int)res.Data;

            return new WinsOnlyRoundResult(new Wins(wins));
        }

        public Task<IGameResult> Visit(NegativeRound result)
        {
            snackbar.Add("Cell is already configured", Severity.Info);
            return Task.FromResult(result as IGameResult);
        }

        public async Task<IGameResult> Visit(NegativeRound.Empty result)
        {
            var res = await dialogService.Show<NumberInput>("Enter wins").Result;

            if (res is null || res.Data is null) return result;

            int wins = (int)res.Data;

            return new NegativeRound(new Wins(wins));
        }
    }
}